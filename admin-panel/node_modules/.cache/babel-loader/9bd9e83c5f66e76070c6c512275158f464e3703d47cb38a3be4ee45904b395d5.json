{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport axiosInstance from './api';\nclass AuthService {\n  constructor() {\n    try {\n      this.token = localStorage.getItem('adminToken');\n      this.user = this.token ? jwtDecode(this.token) : null;\n    } catch (error) {\n      console.error('Error initializing auth service:', error);\n      this.token = null;\n      this.user = null;\n    }\n  }\n  async login(email, password) {\n    try {\n      const response = await axiosInstance.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n      if (token) {\n        localStorage.setItem('adminToken', token);\n        this.token = token;\n        this.user = user || (token ? jwtDecode(token) : null);\n      }\n      return this.user;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n    }\n  }\n  async register(userData) {\n    try {\n      const response = await axiosInstance.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed');\n    }\n  }\n  async forgotPassword(email) {\n    try {\n      await axiosInstance.post('/auth/forgot-password', {\n        email\n      });\n      return true;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Password reset request failed');\n    }\n  }\n  async resetPassword(token, newPassword) {\n    try {\n      await axiosInstance.post(`/auth/reset-password/${token}`, {\n        password: newPassword\n      });\n      return true;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Password reset failed');\n    }\n  }\n  async verifyResetToken(token) {\n    try {\n      const response = await axiosInstance.get(`/auth/verify-reset-token/${token}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Invalid or expired token');\n    }\n  }\n  async changePassword(oldPassword, newPassword) {\n    try {\n      await axiosInstance.post('/users/change-password', {\n        oldPassword,\n        newPassword\n      });\n      return true;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Password change failed');\n    }\n  }\n  logout() {\n    try {\n      axiosInstance.post('/auth/logout').catch(err => console.log('Logout API error:', err));\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('adminToken');\n      this.token = null;\n      this.user = null;\n      window.location.href = '/login';\n    }\n  }\n  isAuthenticated() {\n    return !!this.token && !this.isTokenExpired();\n  }\n  isTokenExpired() {\n    if (!this.token) return true;\n    try {\n      const decoded = jwtDecode(this.token);\n      return decoded.exp < Date.now() / 1000;\n    } catch (error) {\n      return true;\n    }\n  }\n  hasPermission(permission) {\n    if (!this.user || !this.user.permissions) return false;\n    return this.user.permissions.includes(permission);\n  }\n  hasRole(role) {\n    if (!this.user || !this.user.roles) return false;\n    return this.user.roles.includes(role);\n  }\n  getUser() {\n    return this.user || null;\n  }\n  async refreshToken() {\n    try {\n      const response = await axiosInstance.post('/auth/refresh-token');\n      const {\n        token\n      } = response.data;\n      if (token) {\n        localStorage.setItem('adminToken', token);\n        this.token = token;\n        this.user = jwtDecode(token);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      this.logout();\n      return false;\n    }\n  }\n  async updateProfile(profileData) {\n    try {\n      const response = await axiosInstance.put('/users/profile', profileData);\n      if (this.user && response.data) {\n        this.user = {\n          ...this.user,\n          ...response.data\n        };\n      }\n      return this.user;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Profile update failed');\n    }\n  }\n  async verifyEmail(token) {\n    try {\n      const response = await axiosInstance.get(`/auth/verify-email/${token}`);\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Email verification failed');\n    }\n  }\n}\n\n// Create an instance before exporting\nconst authServiceInstance = new AuthService();\nexport default authServiceInstance;","map":{"version":3,"names":["jwtDecode","axiosInstance","AuthService","constructor","token","localStorage","getItem","user","error","console","login","email","password","response","post","data","setItem","_error$response","_error$response$data","Error","message","register","userData","_error$response2","_error$response2$data","forgotPassword","_error$response3","_error$response3$data","resetPassword","newPassword","_error$response4","_error$response4$data","verifyResetToken","get","_error$response5","_error$response5$data","changePassword","oldPassword","_error$response6","_error$response6$data","logout","catch","err","log","removeItem","window","location","href","isAuthenticated","isTokenExpired","decoded","exp","Date","now","hasPermission","permission","permissions","includes","hasRole","role","roles","getUser","refreshToken","updateProfile","profileData","put","_error$response7","_error$response7$data","verifyEmail","_error$response8","_error$response8$data","authServiceInstance"],"sources":["/Users/kirannaik/Desktop/zed/Android-fullstack-ibcm/admin-panel/src/services/authService.js"],"sourcesContent":["import jwtDecode from 'jwt-decode';\nimport axiosInstance from './api';\n\nclass AuthService {\n    constructor() {\n        try {\n            this.token = localStorage.getItem('adminToken');\n            this.user = this.token ? jwtDecode(this.token) : null;\n        } catch (error) {\n            console.error('Error initializing auth service:', error);\n            this.token = null;\n            this.user = null;\n        }\n    }\n\n    async login(email, password) {\n        try {\n            const response = await axiosInstance.post('/auth/login', { email, password });\n            const { token, user } = response.data;\n            \n            if (token) {\n                localStorage.setItem('adminToken', token);\n                this.token = token;\n                this.user = user || (token ? jwtDecode(token) : null);\n            }\n            \n            return this.user;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Login failed');\n        }\n    }\n\n    async register(userData) {\n        try {\n            const response = await axiosInstance.post('/auth/register', userData);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Registration failed');\n        }\n    }\n\n    async forgotPassword(email) {\n        try {\n            await axiosInstance.post('/auth/forgot-password', { email });\n            return true;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Password reset request failed');\n        }\n    }\n\n    async resetPassword(token, newPassword) {\n        try {\n            await axiosInstance.post(`/auth/reset-password/${token}`, { password: newPassword });\n            return true;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Password reset failed');\n        }\n    }\n\n    async verifyResetToken(token) {\n        try {\n            const response = await axiosInstance.get(`/auth/verify-reset-token/${token}`);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Invalid or expired token');\n        }\n    }\n\n    async changePassword(oldPassword, newPassword) {\n        try {\n            await axiosInstance.post('/users/change-password', { oldPassword, newPassword });\n            return true;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Password change failed');\n        }\n    }\n\n    logout() {\n        try {\n            axiosInstance.post('/auth/logout').catch(err => console.log('Logout API error:', err));\n        } catch (error) {\n            console.error('Logout error:', error);\n        } finally {\n            localStorage.removeItem('adminToken');\n            this.token = null;\n            this.user = null;\n            window.location.href = '/login';\n        }\n    }\n\n    isAuthenticated() {\n        return !!this.token && !this.isTokenExpired();\n    }\n\n    isTokenExpired() {\n        if (!this.token) return true;\n        try {\n            const decoded = jwtDecode(this.token);\n            return decoded.exp < Date.now() / 1000;\n        } catch (error) {\n            return true;\n        }\n    }\n\n    hasPermission(permission) {\n        if (!this.user || !this.user.permissions) return false;\n        return this.user.permissions.includes(permission);\n    }\n\n    hasRole(role) {\n        if (!this.user || !this.user.roles) return false;\n        return this.user.roles.includes(role);\n    }\n\n    getUser() {\n        return this.user || null;\n    }\n\n    async refreshToken() {\n        try {\n            const response = await axiosInstance.post('/auth/refresh-token');\n            const { token } = response.data;\n            \n            if (token) {\n                localStorage.setItem('adminToken', token);\n                this.token = token;\n                this.user = jwtDecode(token);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            this.logout();\n            return false;\n        }\n    }\n\n    async updateProfile(profileData) {\n        try {\n            const response = await axiosInstance.put('/users/profile', profileData);\n            if (this.user && response.data) {\n                this.user = { ...this.user, ...response.data };\n            }\n            return this.user;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Profile update failed');\n        }\n    }\n\n    async verifyEmail(token) {\n        try {\n            const response = await axiosInstance.get(`/auth/verify-email/${token}`);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Email verification failed');\n        }\n    }\n}\n\n// Create an instance before exporting\nconst authServiceInstance = new AuthService();\nexport default authServiceInstance; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}