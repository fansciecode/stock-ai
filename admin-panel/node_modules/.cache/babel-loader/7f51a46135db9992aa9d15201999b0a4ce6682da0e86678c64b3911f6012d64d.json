{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  businesses: [],\n  total: 0,\n  loading: false,\n  error: null\n};\nconst businessesSlice = createSlice({\n  name: 'businesses',\n  initialState,\n  reducers: {\n    fetchBusinessesStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchBusinessesSuccess: (state, action) => {\n      state.loading = false;\n      state.businesses = action.payload.businesses;\n      state.total = action.payload.total;\n    },\n    fetchBusinessesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateBusinessSuccess: (state, action) => {\n      const index = state.businesses.findIndex(business => business._id === action.payload._id);\n      if (index !== -1) {\n        state.businesses[index] = action.payload;\n      }\n    },\n    verifyBusinessSuccess: (state, action) => {\n      const index = state.businesses.findIndex(business => business._id === action.payload);\n      if (index !== -1) {\n        state.businesses[index].status = 'verified';\n      }\n    },\n    rejectBusinessSuccess: (state, action) => {\n      const index = state.businesses.findIndex(business => business._id === action.payload.id);\n      if (index !== -1) {\n        state.businesses[index].status = 'rejected';\n        state.businesses[index].rejectionReason = action.payload.reason;\n      }\n    }\n  }\n});\nexport const {\n  fetchBusinessesStart,\n  fetchBusinessesSuccess,\n  fetchBusinessesFailure,\n  updateBusinessSuccess,\n  verifyBusinessSuccess,\n  rejectBusinessSuccess\n} = businessesSlice.actions;\nexport default businessesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","businesses","total","loading","error","businessesSlice","name","reducers","fetchBusinessesStart","state","fetchBusinessesSuccess","action","payload","fetchBusinessesFailure","updateBusinessSuccess","index","findIndex","business","_id","verifyBusinessSuccess","status","rejectBusinessSuccess","id","rejectionReason","reason","actions","reducer"],"sources":["/Users/kirannaik/Desktop/zed/Android-fullstack-ibcm/admin-panel/src/slices/businessesSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  businesses: [],\n  total: 0,\n  loading: false,\n  error: null,\n};\n\nconst businessesSlice = createSlice({\n  name: 'businesses',\n  initialState,\n  reducers: {\n    fetchBusinessesStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchBusinessesSuccess: (state, action) => {\n      state.loading = false;\n      state.businesses = action.payload.businesses;\n      state.total = action.payload.total;\n    },\n    fetchBusinessesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateBusinessSuccess: (state, action) => {\n      const index = state.businesses.findIndex(business => business._id === action.payload._id);\n      if (index !== -1) {\n        state.businesses[index] = action.payload;\n      }\n    },\n    verifyBusinessSuccess: (state, action) => {\n      const index = state.businesses.findIndex(business => business._id === action.payload);\n      if (index !== -1) {\n        state.businesses[index].status = 'verified';\n      }\n    },\n    rejectBusinessSuccess: (state, action) => {\n      const index = state.businesses.findIndex(business => business._id === action.payload.id);\n      if (index !== -1) {\n        state.businesses[index].status = 'rejected';\n        state.businesses[index].rejectionReason = action.payload.reason;\n      }\n    },\n  },\n});\n\nexport const {\n  fetchBusinessesStart,\n  fetchBusinessesSuccess,\n  fetchBusinessesFailure,\n  updateBusinessSuccess,\n  verifyBusinessSuccess,\n  rejectBusinessSuccess,\n} = businessesSlice.actions;\n\nexport default businessesSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,EAAE;EACdC,KAAK,EAAE,CAAC;EACRC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,eAAe,GAAGN,WAAW,CAAC;EAClCO,IAAI,EAAE,YAAY;EAClBN,YAAY;EACZO,QAAQ,EAAE;IACRC,oBAAoB,EAAGC,KAAK,IAAK;MAC/BA,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAACL,KAAK,GAAG,IAAI;IACpB,CAAC;IACDM,sBAAsB,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MACzCF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACR,UAAU,GAAGU,MAAM,CAACC,OAAO,CAACX,UAAU;MAC5CQ,KAAK,CAACP,KAAK,GAAGS,MAAM,CAACC,OAAO,CAACV,KAAK;IACpC,CAAC;IACDW,sBAAsB,EAAEA,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACzCF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDE,qBAAqB,EAAEA,CAACL,KAAK,EAAEE,MAAM,KAAK;MACxC,MAAMI,KAAK,GAAGN,KAAK,CAACR,UAAU,CAACe,SAAS,CAACC,QAAQ,IAAIA,QAAQ,CAACC,GAAG,KAAKP,MAAM,CAACC,OAAO,CAACM,GAAG,CAAC;MACzF,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBN,KAAK,CAACR,UAAU,CAACc,KAAK,CAAC,GAAGJ,MAAM,CAACC,OAAO;MAC1C;IACF,CAAC;IACDO,qBAAqB,EAAEA,CAACV,KAAK,EAAEE,MAAM,KAAK;MACxC,MAAMI,KAAK,GAAGN,KAAK,CAACR,UAAU,CAACe,SAAS,CAACC,QAAQ,IAAIA,QAAQ,CAACC,GAAG,KAAKP,MAAM,CAACC,OAAO,CAAC;MACrF,IAAIG,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBN,KAAK,CAACR,UAAU,CAACc,KAAK,CAAC,CAACK,MAAM,GAAG,UAAU;MAC7C;IACF,CAAC;IACDC,qBAAqB,EAAEA,CAACZ,KAAK,EAAEE,MAAM,KAAK;MACxC,MAAMI,KAAK,GAAGN,KAAK,CAACR,UAAU,CAACe,SAAS,CAACC,QAAQ,IAAIA,QAAQ,CAACC,GAAG,KAAKP,MAAM,CAACC,OAAO,CAACU,EAAE,CAAC;MACxF,IAAIP,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBN,KAAK,CAACR,UAAU,CAACc,KAAK,CAAC,CAACK,MAAM,GAAG,UAAU;QAC3CX,KAAK,CAACR,UAAU,CAACc,KAAK,CAAC,CAACQ,eAAe,GAAGZ,MAAM,CAACC,OAAO,CAACY,MAAM;MACjE;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXhB,oBAAoB;EACpBE,sBAAsB;EACtBG,sBAAsB;EACtBC,qBAAqB;EACrBK,qBAAqB;EACrBE;AACF,CAAC,GAAGhB,eAAe,CAACoB,OAAO;AAE3B,eAAepB,eAAe,CAACqB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}