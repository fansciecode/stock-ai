{"ast":null,"code":"var _jsxFileName = \"/Users/kirannaik/Desktop/zed/Android-fullstack-ibcm/admin-panel/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const initAuth = () => {\n      try {\n        if (authService.isAuthenticated()) {\n          setUser(authService.getUser());\n        }\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const user = await authService.login(email, password);\n      setUser(user);\n      return user;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    try {\n      authService.logout();\n      setUser(null);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await authService.register(userData);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      setLoading(true);\n      setError(null);\n      await authService.forgotPassword(email);\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetPassword = async (token, newPassword) => {\n    try {\n      setLoading(true);\n      setError(null);\n      await authService.resetPassword(token, newPassword);\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const verifyResetToken = async token => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await authService.verifyResetToken(token);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const updatedUser = await authService.updateProfile(profileData);\n      setUser(updatedUser);\n      return updatedUser;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const verifyEmail = async token => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await authService.verifyEmail(token);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const changePassword = async (oldPassword, newPassword) => {\n    try {\n      setLoading(true);\n      setError(null);\n      await authService.changePassword(oldPassword, newPassword);\n      return true;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const hasPermission = permission => {\n    return authService.hasPermission(permission);\n  };\n  const hasRole = role => {\n    return authService.hasRole(role);\n  };\n  const isAuthenticated = () => {\n    return authService.isAuthenticated();\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    forgotPassword,\n    resetPassword,\n    verifyResetToken,\n    updateProfile,\n    verifyEmail,\n    changePassword,\n    hasPermission,\n    hasRole,\n    isAuthenticated\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","initAuth","isAuthenticated","getUser","message","login","email","password","logout","register","userData","result","forgotPassword","resetPassword","token","newPassword","verifyResetToken","updateProfile","profileData","updatedUser","verifyEmail","changePassword","oldPassword","hasPermission","permission","hasRole","role","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/kirannaik/Desktop/zed/Android-fullstack-ibcm/admin-panel/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport authService from '../services/authService';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const initAuth = () => {\n            try {\n                if (authService.isAuthenticated()) {\n                    setUser(authService.getUser());\n                }\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        initAuth();\n    }, []);\n\n    const login = async (email, password) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const user = await authService.login(email, password);\n            setUser(user);\n            return user;\n        } catch (error) {\n            setError(error.message);\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const logout = () => {\n        try {\n            authService.logout();\n            setUser(null);\n        } catch (error) {\n            setError(error.message);\n        }\n    };\n\n    const register = async (userData) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const result = await authService.register(userData);\n            return result;\n        } catch (error) {\n            setError(error.message);\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const forgotPassword = async (email) => {\n        try {\n            setLoading(true);\n            setError(null);\n            await authService.forgotPassword(email);\n        } catch (error) {\n            setError(error.message);\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const resetPassword = async (token, newPassword) => {\n        try {\n            setLoading(true);\n            setError(null);\n            await authService.resetPassword(token, newPassword);\n        } catch (error) {\n            setError(error.message);\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const verifyResetToken = async (token) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const result = await authService.verifyResetToken(token);\n            return result;\n        } catch (error) {\n            setError(error.message);\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const updateProfile = async (profileData) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const updatedUser = await authService.updateProfile(profileData);\n            setUser(updatedUser);\n            return updatedUser;\n        } catch (error) {\n            setError(error.message);\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const verifyEmail = async (token) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const result = await authService.verifyEmail(token);\n            return result;\n        } catch (error) {\n            setError(error.message);\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const changePassword = async (oldPassword, newPassword) => {\n        try {\n            setLoading(true);\n            setError(null);\n            await authService.changePassword(oldPassword, newPassword);\n            return true;\n        } catch (error) {\n            setError(error.message);\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const hasPermission = (permission) => {\n        return authService.hasPermission(permission);\n    };\n\n    const hasRole = (role) => {\n        return authService.hasRole(role);\n    };\n\n    const isAuthenticated = () => {\n        return authService.isAuthenticated();\n    };\n\n    const value = {\n        user,\n        loading,\n        error,\n        login,\n        logout,\n        register,\n        forgotPassword,\n        resetPassword,\n        verifyResetToken,\n        updateProfile,\n        verifyEmail,\n        changePassword,\n        hasPermission,\n        hasRole,\n        isAuthenticated\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}