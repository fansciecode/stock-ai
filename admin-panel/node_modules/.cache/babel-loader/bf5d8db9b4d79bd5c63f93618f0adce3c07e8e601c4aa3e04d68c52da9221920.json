{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport axiosInstance from './api';\nclass AuthService {\n  constructor() {\n    this.token = localStorage.getItem('adminToken');\n    this.user = this.token ? jwtDecode(this.token) : null;\n  }\n  async login(email, password) {\n    try {\n      const response = await axiosInstance.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem('adminToken', token);\n      this.token = token;\n      this.user = user;\n      return user;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n    }\n  }\n  async register(userData) {\n    try {\n      const response = await axiosInstance.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed');\n    }\n  }\n  async forgotPassword(email) {\n    try {\n      await axiosInstance.post('/auth/forgot-password', {\n        email\n      });\n      return true;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Password reset request failed');\n    }\n  }\n  async resetPassword(token, newPassword) {\n    try {\n      await axiosInstance.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return true;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Password reset failed');\n    }\n  }\n  async changePassword(oldPassword, newPassword) {\n    try {\n      await axiosInstance.post('/auth/change-password', {\n        oldPassword,\n        newPassword\n      });\n      return true;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Password change failed');\n    }\n  }\n  logout() {\n    localStorage.removeItem('adminToken');\n    this.token = null;\n    this.user = null;\n    window.location.href = '/login';\n  }\n  isAuthenticated() {\n    return !!this.token && !this.isTokenExpired();\n  }\n  isTokenExpired() {\n    if (!this.token) return true;\n    try {\n      const decoded = jwtDecode(this.token);\n      return decoded.exp < Date.now() / 1000;\n    } catch (error) {\n      return true;\n    }\n  }\n  hasPermission(permission) {\n    var _this$user, _this$user$permission;\n    return ((_this$user = this.user) === null || _this$user === void 0 ? void 0 : (_this$user$permission = _this$user.permissions) === null || _this$user$permission === void 0 ? void 0 : _this$user$permission.includes(permission)) || false;\n  }\n  hasRole(role) {\n    var _this$user2, _this$user2$roles;\n    return ((_this$user2 = this.user) === null || _this$user2 === void 0 ? void 0 : (_this$user2$roles = _this$user2.roles) === null || _this$user2$roles === void 0 ? void 0 : _this$user2$roles.includes(role)) || false;\n  }\n  getUser() {\n    return this.user;\n  }\n  async refreshToken() {\n    try {\n      const response = await axiosInstance.post('/auth/refresh-token');\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('adminToken', token);\n      this.token = token;\n      this.user = jwtDecode(token);\n      return true;\n    } catch (error) {\n      this.logout();\n      return false;\n    }\n  }\n  async updateProfile(profileData) {\n    try {\n      const response = await axiosInstance.put('/auth/profile', profileData);\n      this.user = {\n        ...this.user,\n        ...response.data\n      };\n      return this.user;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Profile update failed');\n    }\n  }\n  async enable2FA() {\n    try {\n      const response = await axiosInstance.post('/auth/2fa/enable');\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || '2FA enablement failed');\n    }\n  }\n  async verify2FA(code) {\n    try {\n      const response = await axiosInstance.post('/auth/2fa/verify', {\n        code\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || '2FA verification failed');\n    }\n  }\n  async disable2FA(code) {\n    try {\n      await axiosInstance.post('/auth/2fa/disable', {\n        code\n      });\n      return true;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || '2FA disablement failed');\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["jwtDecode","axiosInstance","AuthService","constructor","token","localStorage","getItem","user","login","email","password","response","post","data","setItem","error","_error$response","_error$response$data","Error","message","register","userData","_error$response2","_error$response2$data","forgotPassword","_error$response3","_error$response3$data","resetPassword","newPassword","_error$response4","_error$response4$data","changePassword","oldPassword","_error$response5","_error$response5$data","logout","removeItem","window","location","href","isAuthenticated","isTokenExpired","decoded","exp","Date","now","hasPermission","permission","_this$user","_this$user$permission","permissions","includes","hasRole","role","_this$user2","_this$user2$roles","roles","getUser","refreshToken","updateProfile","profileData","put","_error$response6","_error$response6$data","enable2FA","_error$response7","_error$response7$data","verify2FA","code","_error$response8","_error$response8$data","disable2FA","_error$response9","_error$response9$data"],"sources":["/Users/kirannaik/Desktop/zed/Android-fullstack-ibcm/admin-panel/src/services/authService.js"],"sourcesContent":["import jwtDecode from 'jwt-decode';\nimport axiosInstance from './api';\n\nclass AuthService {\n    constructor() {\n        this.token = localStorage.getItem('adminToken');\n        this.user = this.token ? jwtDecode(this.token) : null;\n    }\n\n    async login(email, password) {\n        try {\n            const response = await axiosInstance.post('/auth/login', { email, password });\n            const { token, user } = response.data;\n            \n            localStorage.setItem('adminToken', token);\n            this.token = token;\n            this.user = user;\n            \n            return user;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Login failed');\n        }\n    }\n\n    async register(userData) {\n        try {\n            const response = await axiosInstance.post('/auth/register', userData);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Registration failed');\n        }\n    }\n\n    async forgotPassword(email) {\n        try {\n            await axiosInstance.post('/auth/forgot-password', { email });\n            return true;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Password reset request failed');\n        }\n    }\n\n    async resetPassword(token, newPassword) {\n        try {\n            await axiosInstance.post('/auth/reset-password', { token, newPassword });\n            return true;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Password reset failed');\n        }\n    }\n\n    async changePassword(oldPassword, newPassword) {\n        try {\n            await axiosInstance.post('/auth/change-password', { oldPassword, newPassword });\n            return true;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Password change failed');\n        }\n    }\n\n    logout() {\n        localStorage.removeItem('adminToken');\n        this.token = null;\n        this.user = null;\n        window.location.href = '/login';\n    }\n\n    isAuthenticated() {\n        return !!this.token && !this.isTokenExpired();\n    }\n\n    isTokenExpired() {\n        if (!this.token) return true;\n        try {\n            const decoded = jwtDecode(this.token);\n            return decoded.exp < Date.now() / 1000;\n        } catch (error) {\n            return true;\n        }\n    }\n\n    hasPermission(permission) {\n        return this.user?.permissions?.includes(permission) || false;\n    }\n\n    hasRole(role) {\n        return this.user?.roles?.includes(role) || false;\n    }\n\n    getUser() {\n        return this.user;\n    }\n\n    async refreshToken() {\n        try {\n            const response = await axiosInstance.post('/auth/refresh-token');\n            const { token } = response.data;\n            \n            localStorage.setItem('adminToken', token);\n            this.token = token;\n            this.user = jwtDecode(token);\n            \n            return true;\n        } catch (error) {\n            this.logout();\n            return false;\n        }\n    }\n\n    async updateProfile(profileData) {\n        try {\n            const response = await axiosInstance.put('/auth/profile', profileData);\n            this.user = { ...this.user, ...response.data };\n            return this.user;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Profile update failed');\n        }\n    }\n\n    async enable2FA() {\n        try {\n            const response = await axiosInstance.post('/auth/2fa/enable');\n            return response.data;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || '2FA enablement failed');\n        }\n    }\n\n    async verify2FA(code) {\n        try {\n            const response = await axiosInstance.post('/auth/2fa/verify', { code });\n            return response.data;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || '2FA verification failed');\n        }\n    }\n\n    async disable2FA(code) {\n        try {\n            await axiosInstance.post('/auth/2fa/disable', { code });\n            return true;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || '2FA disablement failed');\n        }\n    }\n}\n\nexport default new AuthService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}