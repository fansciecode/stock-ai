{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import authService from'../services/authService';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const initAuth=()=>{try{if(authService.isAuthenticated()){const userData=authService.getUser();setUser(userData);}}catch(error){console.error('Auth initialization error:',error);setError(error.message||'Authentication error');}finally{setLoading(false);}};initAuth();},[]);const login=async(email,password)=>{try{setLoading(true);setError(null);const userData=await authService.login(email,password);if(userData){setUser(userData);}return userData;}catch(error){console.error('Login error:',error);setError(error.message||'Login failed');throw error;}finally{setLoading(false);}};const logout=()=>{try{authService.logout();setUser(null);}catch(error){console.error('Logout error:',error);setError(error.message||'Logout failed');}};const register=async userData=>{try{setLoading(true);setError(null);const result=await authService.register(userData);return result;}catch(error){console.error('Registration error:',error);setError(error.message||'Registration failed');throw error;}finally{setLoading(false);}};const forgotPassword=async email=>{try{setLoading(true);setError(null);await authService.forgotPassword(email);}catch(error){console.error('Forgot password error:',error);setError(error.message||'Password reset request failed');throw error;}finally{setLoading(false);}};const resetPassword=async(token,newPassword)=>{try{setLoading(true);setError(null);await authService.resetPassword(token,newPassword);}catch(error){console.error('Reset password error:',error);setError(error.message||'Password reset failed');throw error;}finally{setLoading(false);}};const verifyResetToken=async token=>{try{setLoading(true);setError(null);const result=await authService.verifyResetToken(token);return result;}catch(error){console.error('Verify reset token error:',error);setError(error.message||'Token verification failed');throw error;}finally{setLoading(false);}};const updateProfile=async profileData=>{try{setLoading(true);setError(null);const updatedUser=await authService.updateProfile(profileData);if(updatedUser){setUser(updatedUser);}return updatedUser;}catch(error){console.error('Update profile error:',error);setError(error.message||'Profile update failed');throw error;}finally{setLoading(false);}};const verifyEmail=async token=>{try{setLoading(true);setError(null);const result=await authService.verifyEmail(token);return result;}catch(error){console.error('Verify email error:',error);setError(error.message||'Email verification failed');throw error;}finally{setLoading(false);}};const changePassword=async(oldPassword,newPassword)=>{try{setLoading(true);setError(null);await authService.changePassword(oldPassword,newPassword);return true;}catch(error){console.error('Change password error:',error);setError(error.message||'Password change failed');throw error;}finally{setLoading(false);}};const hasPermission=permission=>{try{return authService.hasPermission(permission);}catch(error){console.error('Permission check error:',error);return false;}};const hasRole=role=>{try{return authService.hasRole(role);}catch(error){console.error('Role check error:',error);return false;}};const isAuthenticated=()=>{try{return authService.isAuthenticated();}catch(error){console.error('Authentication check error:',error);return false;}};const value={user,loading,error,login,logout,register,forgotPassword,resetPassword,verifyResetToken,updateProfile,verifyEmail,changePassword,hasPermission,hasRole,isAuthenticated};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export default AuthContext;","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authService","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","loading","setLoading","error","setError","initAuth","isAuthenticated","userData","getUser","console","message","login","email","password","logout","register","result","forgotPassword","resetPassword","token","newPassword","verifyResetToken","updateProfile","profileData","updatedUser","verifyEmail","changePassword","oldPassword","hasPermission","permission","hasRole","role","value","Provider","useAuth","context","Error"],"sources":["/Users/kirannaik/Desktop/zed/Android-fullstack-ibcm/admin-panel/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport authService from '../services/authService';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const initAuth = () => {\n            try {\n                if (authService.isAuthenticated()) {\n                    const userData = authService.getUser();\n                    setUser(userData);\n                }\n            } catch (error) {\n                console.error('Auth initialization error:', error);\n                setError(error.message || 'Authentication error');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        initAuth();\n    }, []);\n\n    const login = async (email, password) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const userData = await authService.login(email, password);\n            if (userData) {\n                setUser(userData);\n            }\n            return userData;\n        } catch (error) {\n            console.error('Login error:', error);\n            setError(error.message || 'Login failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const logout = () => {\n        try {\n            authService.logout();\n            setUser(null);\n        } catch (error) {\n            console.error('Logout error:', error);\n            setError(error.message || 'Logout failed');\n        }\n    };\n\n    const register = async (userData) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const result = await authService.register(userData);\n            return result;\n        } catch (error) {\n            console.error('Registration error:', error);\n            setError(error.message || 'Registration failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const forgotPassword = async (email) => {\n        try {\n            setLoading(true);\n            setError(null);\n            await authService.forgotPassword(email);\n        } catch (error) {\n            console.error('Forgot password error:', error);\n            setError(error.message || 'Password reset request failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const resetPassword = async (token, newPassword) => {\n        try {\n            setLoading(true);\n            setError(null);\n            await authService.resetPassword(token, newPassword);\n        } catch (error) {\n            console.error('Reset password error:', error);\n            setError(error.message || 'Password reset failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const verifyResetToken = async (token) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const result = await authService.verifyResetToken(token);\n            return result;\n        } catch (error) {\n            console.error('Verify reset token error:', error);\n            setError(error.message || 'Token verification failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const updateProfile = async (profileData) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const updatedUser = await authService.updateProfile(profileData);\n            if (updatedUser) {\n                setUser(updatedUser);\n            }\n            return updatedUser;\n        } catch (error) {\n            console.error('Update profile error:', error);\n            setError(error.message || 'Profile update failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const verifyEmail = async (token) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const result = await authService.verifyEmail(token);\n            return result;\n        } catch (error) {\n            console.error('Verify email error:', error);\n            setError(error.message || 'Email verification failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const changePassword = async (oldPassword, newPassword) => {\n        try {\n            setLoading(true);\n            setError(null);\n            await authService.changePassword(oldPassword, newPassword);\n            return true;\n        } catch (error) {\n            console.error('Change password error:', error);\n            setError(error.message || 'Password change failed');\n            throw error;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const hasPermission = (permission) => {\n        try {\n            return authService.hasPermission(permission);\n        } catch (error) {\n            console.error('Permission check error:', error);\n            return false;\n        }\n    };\n\n    const hasRole = (role) => {\n        try {\n            return authService.hasRole(role);\n        } catch (error) {\n            console.error('Role check error:', error);\n            return false;\n        }\n    };\n\n    const isAuthenticated = () => {\n        try {\n            return authService.isAuthenticated();\n        } catch (error) {\n            console.error('Authentication check error:', error);\n            return false;\n        }\n    };\n\n    const value = {\n        user,\n        loading,\n        error,\n        login,\n        logout,\n        register,\n        forgotPassword,\n        resetPassword,\n        verifyResetToken,\n        updateProfile,\n        verifyEmail,\n        changePassword,\n        hasPermission,\n        hasRole,\n        isAuthenticated\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}