{"ast":null,"code":"import jwtDecode from'jwt-decode';import axiosInstance from'./api';class AuthService{constructor(){try{this.token=localStorage.getItem('adminToken');this.user=this.token?jwtDecode(this.token):null;}catch(error){console.error('Error initializing auth service:',error);this.token=null;this.user=null;}}async login(email,password){try{const response=await axiosInstance.post('/auth/login',{email,password});const{token,user}=response.data;if(token){localStorage.setItem('adminToken',token);this.token=token;this.user=user||(token?jwtDecode(token):null);}return this.user;}catch(error){var _error$response,_error$response$data;throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Login failed');}}async register(userData){try{const response=await axiosInstance.post('/auth/register',userData);return response.data;}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Registration failed');}}async forgotPassword(email){try{await axiosInstance.post('/auth/forgot-password',{email});return true;}catch(error){var _error$response3,_error$response3$data;throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Password reset request failed');}}async resetPassword(token,newPassword){try{await axiosInstance.post(`/auth/reset-password/${token}`,{password:newPassword});return true;}catch(error){var _error$response4,_error$response4$data;throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Password reset failed');}}async verifyResetToken(token){try{const response=await axiosInstance.get(`/auth/verify-reset-token/${token}`);return response.data;}catch(error){var _error$response5,_error$response5$data;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Invalid or expired token');}}async changePassword(oldPassword,newPassword){try{await axiosInstance.post('/users/change-password',{oldPassword,newPassword});return true;}catch(error){var _error$response6,_error$response6$data;throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Password change failed');}}logout(){try{axiosInstance.post('/auth/logout').catch(err=>console.log('Logout API error:',err));}catch(error){console.error('Logout error:',error);}finally{localStorage.removeItem('adminToken');this.token=null;this.user=null;window.location.href='/login';}}isAuthenticated(){return!!this.token&&!this.isTokenExpired();}isTokenExpired(){if(!this.token)return true;try{const decoded=jwtDecode(this.token);return decoded.exp<Date.now()/1000;}catch(error){return true;}}hasPermission(permission){if(!this.user||!this.user.permissions)return false;return this.user.permissions.includes(permission);}hasRole(role){if(!this.user||!this.user.roles)return false;return this.user.roles.includes(role);}getUser(){return this.user||null;}async refreshToken(){try{const response=await axiosInstance.post('/auth/refresh-token');const{token}=response.data;if(token){localStorage.setItem('adminToken',token);this.token=token;this.user=jwtDecode(token);return true;}return false;}catch(error){this.logout();return false;}}async updateProfile(profileData){try{const response=await axiosInstance.put('/users/profile',profileData);if(this.user&&response.data){this.user={...this.user,...response.data};}return this.user;}catch(error){var _error$response7,_error$response7$data;throw new Error(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||'Profile update failed');}}async verifyEmail(token){try{const response=await axiosInstance.get(`/auth/verify-email/${token}`);return response.data;}catch(error){var _error$response8,_error$response8$data;throw new Error(((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.message)||'Email verification failed');}}}// Create an instance before exporting\nconst authServiceInstance=new AuthService();export default authServiceInstance;","map":{"version":3,"names":["jwtDecode","axiosInstance","AuthService","constructor","token","localStorage","getItem","user","error","console","login","email","password","response","post","data","setItem","_error$response","_error$response$data","Error","message","register","userData","_error$response2","_error$response2$data","forgotPassword","_error$response3","_error$response3$data","resetPassword","newPassword","_error$response4","_error$response4$data","verifyResetToken","get","_error$response5","_error$response5$data","changePassword","oldPassword","_error$response6","_error$response6$data","logout","catch","err","log","removeItem","window","location","href","isAuthenticated","isTokenExpired","decoded","exp","Date","now","hasPermission","permission","permissions","includes","hasRole","role","roles","getUser","refreshToken","updateProfile","profileData","put","_error$response7","_error$response7$data","verifyEmail","_error$response8","_error$response8$data","authServiceInstance"],"sources":["/Users/kirannaik/Desktop/zed/Android-fullstack-ibcm/admin-panel/src/services/authService.js"],"sourcesContent":["import jwtDecode from 'jwt-decode';\nimport axiosInstance from './api';\n\nclass AuthService {\n    constructor() {\n        try {\n            this.token = localStorage.getItem('adminToken');\n            this.user = this.token ? jwtDecode(this.token) : null;\n        } catch (error) {\n            console.error('Error initializing auth service:', error);\n            this.token = null;\n            this.user = null;\n        }\n    }\n\n    async login(email, password) {\n        try {\n            const response = await axiosInstance.post('/auth/login', { email, password });\n            const { token, user } = response.data;\n            \n            if (token) {\n                localStorage.setItem('adminToken', token);\n                this.token = token;\n                this.user = user || (token ? jwtDecode(token) : null);\n            }\n            \n            return this.user;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Login failed');\n        }\n    }\n\n    async register(userData) {\n        try {\n            const response = await axiosInstance.post('/auth/register', userData);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Registration failed');\n        }\n    }\n\n    async forgotPassword(email) {\n        try {\n            await axiosInstance.post('/auth/forgot-password', { email });\n            return true;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Password reset request failed');\n        }\n    }\n\n    async resetPassword(token, newPassword) {\n        try {\n            await axiosInstance.post(`/auth/reset-password/${token}`, { password: newPassword });\n            return true;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Password reset failed');\n        }\n    }\n\n    async verifyResetToken(token) {\n        try {\n            const response = await axiosInstance.get(`/auth/verify-reset-token/${token}`);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Invalid or expired token');\n        }\n    }\n\n    async changePassword(oldPassword, newPassword) {\n        try {\n            await axiosInstance.post('/users/change-password', { oldPassword, newPassword });\n            return true;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Password change failed');\n        }\n    }\n\n    logout() {\n        try {\n            axiosInstance.post('/auth/logout').catch(err => console.log('Logout API error:', err));\n        } catch (error) {\n            console.error('Logout error:', error);\n        } finally {\n            localStorage.removeItem('adminToken');\n            this.token = null;\n            this.user = null;\n            window.location.href = '/login';\n        }\n    }\n\n    isAuthenticated() {\n        return !!this.token && !this.isTokenExpired();\n    }\n\n    isTokenExpired() {\n        if (!this.token) return true;\n        try {\n            const decoded = jwtDecode(this.token);\n            return decoded.exp < Date.now() / 1000;\n        } catch (error) {\n            return true;\n        }\n    }\n\n    hasPermission(permission) {\n        if (!this.user || !this.user.permissions) return false;\n        return this.user.permissions.includes(permission);\n    }\n\n    hasRole(role) {\n        if (!this.user || !this.user.roles) return false;\n        return this.user.roles.includes(role);\n    }\n\n    getUser() {\n        return this.user || null;\n    }\n\n    async refreshToken() {\n        try {\n            const response = await axiosInstance.post('/auth/refresh-token');\n            const { token } = response.data;\n            \n            if (token) {\n                localStorage.setItem('adminToken', token);\n                this.token = token;\n                this.user = jwtDecode(token);\n                return true;\n            }\n            return false;\n        } catch (error) {\n            this.logout();\n            return false;\n        }\n    }\n\n    async updateProfile(profileData) {\n        try {\n            const response = await axiosInstance.put('/users/profile', profileData);\n            if (this.user && response.data) {\n                this.user = { ...this.user, ...response.data };\n            }\n            return this.user;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Profile update failed');\n        }\n    }\n\n    async verifyEmail(token) {\n        try {\n            const response = await axiosInstance.get(`/auth/verify-email/${token}`);\n            return response.data;\n        } catch (error) {\n            throw new Error(error.response?.data?.message || 'Email verification failed');\n        }\n    }\n}\n\n// Create an instance before exporting\nconst authServiceInstance = new AuthService();\nexport default authServiceInstance; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}