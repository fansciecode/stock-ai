version: '3.8'

services:
  # Client Service (Frontend)
  client:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.client
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - PORT=8000
      - SERVER_URL=http://server:8001
      - AI_MODEL_URL=http://ai-model:8002
    depends_on:
      - server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Server Service (Backend API)
  server:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.server
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - PORT=8001
      - AI_MODEL_URL=http://ai-model:8002
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ai_trading
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../../data:/app/data
      - ../../logs:/app/logs
    depends_on:
      - ai-model
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Model Service (Machine Learning)
  ai-model:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.ai-model
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=production
      - PORT=8002
      - LOG_LEVEL=INFO
      - AUTO_LEARNING_ENABLED=true
      - BINANCE_API_KEY=${BINANCE_API_KEY:-demo_key}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY:-demo_secret}
    volumes:
      - ../../models:/app/models
      - ../../logs:/app/logs
      - ../../data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ai_trading
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - client
      - server
      - ai-model
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
