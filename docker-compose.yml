# Docker Compose for Stock AI Trading System
version: '3.8'

services:
  # Main trading API
  trading-api:
    build:
      context: .
      target: production
    container_name: stock-ai-api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./configs:/app/configs
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Real-time data streamer
  data-streamer:
    build:
      context: .
      target: production
    container_name: stock-ai-streamer
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/trading_db
    depends_on:
      - postgres
    restart: unless-stopped
    command: ["python", "src/data/realtime_streamer.py"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Model training service
  model-trainer:
    build:
      context: .
      target: production
    container_name: stock-ai-trainer
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    environment:
      - ENVIRONMENT=production
      - CUDA_VISIBLE_DEVICES=0  # Use GPU if available
    restart: "no"  # Manual start for training
    command: ["python", "src/models/advanced_models.py"]
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Trading orchestrator
  orchestrator:
    build:
      context: .
      target: production
    container_name: stock-ai-orchestrator
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./configs:/app/configs
    environment:
      - ENVIRONMENT=production
      - API_URL=http://trading-api:8000
    depends_on:
      - trading-api
    restart: unless-stopped
    command: ["python", "src/orchestrator/orchestrator.py", "--mode", "continuous"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL database
  postgres:
    image: postgres:13
    container_name: stock-ai-postgres
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis for caching and message queuing
  redis:
    image: redis:6-alpine
    container_name: stock-ai-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: stock-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: stock-ai-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

  # MLflow for experiment tracking
  mlflow:
    image: python:3.9-slim
    container_name: stock-ai-mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlruns
      - ./models:/models
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:password@postgres:5432/mlflow_db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=file:///mlruns
    depends_on:
      - postgres
    restart: unless-stopped
    command: |
      bash -c "pip install mlflow psycopg2-binary && 
               mlflow server 
               --backend-store-uri postgresql://postgres:password@postgres:5432/mlflow_db 
               --default-artifact-root file:///mlruns 
               --host 0.0.0.0 
               --port 5000"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

  # Jupyter notebook for analysis
  jupyter:
    build:
      context: .
      target: development
    container_name: stock-ai-jupyter
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
    environment:
      - JUPYTER_ENABLE_LAB=yes
    command: |
      bash -c "pip install jupyter jupyterlab && 
               jupyter lab 
               --ip=0.0.0.0 
               --port=8888 
               --no-browser 
               --allow-root 
               --NotebookApp.token='' 
               --NotebookApp.password=''"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: stock-ai-network
