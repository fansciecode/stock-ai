{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./MapView.css';/**\n * MapView Component\n * \n * Displays events on a map using Leaflet.\n * This component is designed to match the Android and iOS map view functionality.\n */import{jsx as _jsx}from\"react/jsx-runtime\";const MapView=_ref=>{let{events,userLocation,onEventSelect}=_ref;const[mapInitialized,setMapInitialized]=useState(false);const[map,setMap]=useState(null);const[markers,setMarkers]=useState([]);// Initialize map\nuseEffect(()=>{// We need to dynamically import Leaflet since it's a client-side library\nconst initMap=async()=>{try{// Dynamically import Leaflet\nconst L=await import('leaflet');await import('leaflet/dist/leaflet.css');// Create map if it doesn't exist yet\nif(!mapInitialized){// Default center if no user location\nconst defaultCenter=[40.7128,-74.0060];// New York\nconst center=userLocation?[userLocation.latitude,userLocation.longitude]:defaultCenter;// Create map\nconst mapInstance=L.map('map').setView(center,12);// Add tile layer (OpenStreetMap)\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{attribution:'&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'}).addTo(mapInstance);// Add user location marker if available\nif(userLocation){L.circleMarker([userLocation.latitude,userLocation.longitude],{color:'#1976d2',fillColor:'#1976d2',fillOpacity:0.8,radius:8}).addTo(mapInstance);}setMap(mapInstance);setMapInitialized(true);}}catch(error){console.error('Error initializing map:',error);}};initMap();// Cleanup function\nreturn()=>{if(map){map.remove();}};},[userLocation]);// Add event markers\nuseEffect(()=>{const addMarkers=async()=>{if(!map||!events.length)return;try{// Dynamically import Leaflet\nconst L=await import('leaflet');// Clear existing markers\nmarkers.forEach(marker=>marker.remove());const newMarkers=[];// Add markers for each event\nevents.forEach(event=>{if(event.location&&event.location.coordinates){// Create marker\nconst marker=L.marker([event.location.coordinates[1],event.location.coordinates[0]],{title:event.title}).addTo(map);// Add popup\nmarker.bindPopup(`\n              <div class=\"map-popup\">\n                <h3>${event.title}</h3>\n                <p>${event.description.substring(0,100)}${event.description.length>100?'...':''}</p>\n                <button class=\"popup-button\">View Details</button>\n              </div>\n            `);// Add click handler\nmarker.on('click',()=>{// Open popup\nmarker.openPopup();// Add click handler to button\nsetTimeout(()=>{const button=document.querySelector('.popup-button');if(button){button.addEventListener('click',()=>{onEventSelect(event.id);});}},0);});newMarkers.push(marker);}});setMarkers(newMarkers);// Fit bounds to show all markers\nif(newMarkers.length>0){const group=L.featureGroup(newMarkers);map.fitBounds(group.getBounds().pad(0.1));}}catch(error){console.error('Error adding markers:',error);}};if(map){addMarkers();}},[map,events,onEventSelect]);return/*#__PURE__*/_jsx(\"div\",{id:\"map\",className:\"map-container\"});};export default MapView;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}