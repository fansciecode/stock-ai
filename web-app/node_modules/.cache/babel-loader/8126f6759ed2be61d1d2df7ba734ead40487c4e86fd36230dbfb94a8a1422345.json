{"ast":null,"code":"import api from'./api';/**\n * AI Service for IBCM AI-powered features and recommendations\n * Integrates with IBCM-ai microservice through the backend API\n */class AIService{/**\n   * Perform enhanced search with AI capabilities\n   * @param {string} query - Search query\n   * @param {string} userId - User ID\n   * @param {Object} filters - Optional filters\n   * @param {Object} location - Optional location object\n   * @param {Object} preferences - Optional user preferences\n   * @returns {Promise<Object>} Search results with metadata\n   */async enhancedSearch(query,userId){let filters=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let location=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;let preferences=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;try{const response=await api.post('/api/ai/search',{query,userId,filters,location,preferences});return response.data;}catch(error){console.error('Enhanced search error:',error);throw error;}}/**\n   * Get personalized recommendations for a user\n   * @param {string} userId - User ID\n   * @param {number} limit - Number of recommendations to return\n   * @param {string} type - Optional type filter\n   * @param {string} location - Optional location\n   * @returns {Promise<Array>} List of recommendations\n   */async getPersonalizedRecommendations(userId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;let type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let location=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;try{let url=`/api/ai/recommendations?userId=${userId}&limit=${limit}`;if(type)url+=`&type=${type}`;if(location)url+=`&location=${encodeURIComponent(location)}`;const response=await api.get(url);return response.data;}catch(error){var _error$response;console.error('Personalized recommendations error:',error);// Return empty array as fallback\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===404||!error.response){return[];}throw error;}}/**\n   * Get optimized recommendations based on context\n   * @param {string} userId - User ID\n   * @param {string} context - Optional context\n   * @param {number} limit - Number of recommendations to return\n   * @returns {Promise<Array>} List of recommendations\n   */async getOptimizedRecommendations(userId){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;try{let url=`/api/ai/recommendations/optimized?userId=${userId}&limit=${limit}`;if(context)url+=`&context=${encodeURIComponent(context)}`;const response=await api.get(url);return response.data;}catch(error){var _error$response2;console.error('Optimized recommendations error:',error);// Return empty array as fallback\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===404||!error.response){return[];}throw error;}}/**\n   * Get location-based recommendations\n   * @param {string} userId - User ID\n   * @param {number} latitude - Latitude\n   * @param {number} longitude - Longitude\n   * @param {number} radius - Search radius in km\n   * @param {string} category - Optional category\n   * @param {number} limit - Number of recommendations to return\n   * @returns {Promise<Array>} List of recommendations\n   */async getLocationRecommendations(userId,latitude,longitude){let radius=arguments.length>3&&arguments[3]!==undefined?arguments[3]:10;let category=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;let limit=arguments.length>5&&arguments[5]!==undefined?arguments[5]:10;try{const response=await api.post('/api/ai/location-recommendations',{userId,latitude,longitude,radius,category,limit});return response.data;}catch(error){var _error$response3;console.error('Location recommendations error:',error);// Return empty array as fallback\nif(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===404||!error.response){return[];}throw error;}}/**\n   * Get user insights and analytics\n   * @param {string} userId - User ID\n   * @param {string} period - Time period (day, week, month, year)\n   * @returns {Promise<Object>} User insights\n   */async getUserInsights(userId){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'month';try{const response=await api.get(`/api/ai/user/insights?userId=${userId}&period=${period}`);return response.data;}catch(error){console.error('User insights error:',error);throw error;}}/**\n   * Get user preferences\n   * @param {string} userId - User ID\n   * @returns {Promise<Object>} User preferences\n   */async getUserPreferences(userId){try{const response=await api.get(`/api/ai/user/preferences?userId=${userId}`);return response.data;}catch(error){console.error('User preferences error:',error);throw error;}}/**\n   * Update user preferences\n   * @param {string} userId - User ID\n   * @param {Object} preferences - User preferences\n   * @returns {Promise<Object>} Updated user preferences\n   */async updateUserPreferences(userId,preferences){try{const response=await api.put('/api/ai/user/preferences',{userId,preferences});return response.data;}catch(error){console.error('Update user preferences error:',error);throw error;}}/**\n   * Generate event description\n   * @param {string} title - Event title\n   * @param {string} category - Event category\n   * @param {string} context - Optional context\n   * @returns {Promise<Object>} Generated content\n   */async generateEventDescription(title,category){let context=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';try{const response=await api.post('/api/ai/generate-description',{title,category,context});return response.data;}catch(error){console.error('Generate event description error:',error);throw error;}}/**\n   * Generate tags for content\n   * @param {string} content - Content to generate tags for\n   * @param {number} count - Number of tags to generate\n   * @returns {Promise<Array>} List of tags\n   */async generateTags(content){let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;try{const response=await api.post('/api/ai/generate-tags',{content,count});return response.data;}catch(error){var _error$response4;console.error('Generate tags error:',error);// Return empty array as fallback\nif(((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)===404||!error.response){return[];}throw error;}}/**\n   * Analyze sentiment of text\n   * @param {string} text - Text to analyze\n   * @returns {Promise<Object>} Sentiment analysis\n   */async analyzeSentiment(text){try{const response=await api.post('/api/ai/sentiment-analysis',{text});return response.data;}catch(error){console.error('Sentiment analysis error:',error);throw error;}}/**\n   * Submit feedback for AI learning\n   * @param {string} userId - User ID\n   * @param {string} targetId - Target ID\n   * @param {number} feedback - Feedback score\n   * @param {string} comment - Optional comment\n   * @param {string} type - Feedback type\n   * @returns {Promise<string>} Success message\n   */async submitFeedback(userId,targetId,feedback){let comment=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;let type=arguments.length>4?arguments[4]:undefined;try{const response=await api.post('/api/ai/feedback',{userId,targetId,feedback,comment,type});return response.data;}catch(error){console.error('Submit feedback error:',error);throw error;}}/**\n   * Get business analytics\n   * @param {string} businessId - Business ID\n   * @param {string} period - Time period\n   * @returns {Promise<Object>} Business analytics\n   */async getBusinessAnalytics(businessId){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'month';try{const response=await api.get(`/api/ai/business-analytics?businessId=${businessId}&period=${period}`);return response.data;}catch(error){console.error('Business analytics error:',error);throw error;}}/**\n   * Generate marketing campaign\n   * @param {string} businessId - Business ID\n   * @param {string} eventId - Event ID\n   * @param {string} context - Context\n   * @returns {Promise<Object>} Generated campaign\n   */async generateCampaign(businessId,eventId,context){try{const response=await api.post('/api/ai/generate-campaign',{businessId,eventId,context});return response.data;}catch(error){console.error('Generate campaign error:',error);throw error;}}}export default new AIService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}